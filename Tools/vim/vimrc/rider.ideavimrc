mapclear

set surround
set clipboard+=unnamed
" ideavim 與 vim 的剪貼簿共用
set clipboard+=ideaput

" 不要有 錯誤提示音
set visualbell
" set noerrorbells " ideavim 不支援

set nu rnu
nnoremap <A-L> :set rnu!<CR>

let mapleader=','

" 設定搜尋時高亮顯示
set incsearch

" 設定搜尋後高亮顯示
set hlsearch

" 清除高亮搜尋
nnoremap <Leader>sc :nohlsearch<CR>
"inoremap <Leader>sc <Esc>:nohlsearch<CR>

" 在 Normal Mode 清除搜尋高亮結果
nnoremap <Esc> :nohlsearch<CR><Esc>

"==================================================================
" plugins
"==================================================================

"--- package surround
set surround
"--- package matchit
set matchit
"--- package easymotion
Plug 'easymotion/vim-easymotion'
" map <leader>F <Plug>(easymotion-s)
" map <leader>f <Plug>(easymotion-f)
"--- multiple-cursors plugin
" Emulates vim-multiple-cursors
" Basic Commands:
"   <A-n> start multicursor
"   <A-n> next match
"   <A-x> skip next match
"   <A-p> remove current match and go back to previous one
" See https://github.com/terryma/vim-multiple-cursors for details
Plug 'terryma/vim-multiple-cursors'

"--- acejump
"" 按 Enter 跳至標記的下一個位置
"" 按 ESC 可以當作離開 AceJump
"" CycleMode
nnoremap <Leader>jw :action AceAction<CR>
"" MarksMode
nnoremap <Leader>jl :action AceLineAction<CR>
"" LineStartMode
nnoremap <Leader>jl :action AceLineStartsAction<CR>
"" LineEndMode
nnoremap <Leader>je :action AceLineEndsAction<CR>
"" AllWordMode
nnoremap <Leader>ja :action AceWordAction<CR>

"==================================================================
" key mapping
"==================================================================

" indent
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" Navigation - 不要設定為 noremap 要給實作 <Home> <End> 有額外調整的空間
nnoremap <A-h> :action Back<CR>
nnoremap <A-l> :action Forward<CR>
imap <A-h> <HOME>
vmap <A-h> <HOME>
imap <A-l> <END>
vmap <A-l> <END>
nmap <C-h> <Left>
imap <C-h> <Left>
vmap <C-h> <Left>
nmap <C-l> <Right>
imap <C-l> <Right>
vmap <C-l> <Right>
nmap <C-j> <Down>
imap <C-j> <Down>
vmap <C-j> <Down>
nmap <C-k> <Up>
imap <C-k> <Up>
vmap <C-k> <Up>
nmap <Leader>f <PageDown>zz
nmap <Leader>b <PageUp>zz
vmap <Leader>f <PageDown>zz
vmap <Leader>b <PageUp>zz

" 全選
noremap <Leader>a ggVG

" 移至外層 { }
" ]} 為同一鍵，因為 } 使用頻率極高，所以只針對 } 做設定
nnoremap <A-]> ]}
nnoremap <A-[> [{
vnoremap <A-]> ]}
vnoremap <A-[> [{

" 移至外層 ( ) 
nnoremap <A-0> ])
nnoremap <A-9> [(
vnoremap <A-0> ])
vnoremap <A-9> [(

nnoremap <leader>; A;<c-[>
nnoremap <leader>, A,<c-[>



" run all tests
nnoremap <Leader>ra :action RiderUnitTestRunSolutionAction<CR>

" introduce
nnoremap <Leader>iv :action IntroduceVariable<CR>
vnoremap <Leader>iv :action IntroduceVariable<CR>
nnoremap <Leader>if :action IntroduceField<CR>
nnoremap <Leader>ip viw:action IntroduceParameter<CR><ESC>
"nnoremap <Leader>ip :action IntroduceParameter<CR>

" extract
nnoremap <Leader>em V:action ExtractMethod<CR>
vnoremap <Leader>em :action ExtractMethod<CR>

" SurroundWith
nnoremap <Leader>sw V:action SurroundWith<CR>
vnoremap <Leader>sw :action SurroundWith<CR>

" 彈窗
" nnoremap <A-1> :action Refactorings.QuickListPopupAction<CR> " 這個和 vim 原生的功能衝突，所以不使用

" Editor 相關
nnoremap <A-S-Down> :action MoveLineDown<CR>
nnoremap <A-S-J> :action MoveLineDown<CR>
nnoremap <A-S-Up> :action MoveLineUp<CR>
nnoremap <A-S-K> :action MoveLineUp<CR>
vnoremap <A-S-Down> :action MoveLineDown<CR>
vnoremap <A-S-J> :action MoveLineDown<CR>
vnoremap <A-S-Up> :action MoveLineUp<CR>
vnoremap <A-S-K> :action MoveLineUp<CR>
inoremap <A-S-Down> :action MoveLineDown<CR>
inoremap <A-S-J> :action MoveLineDown<CR>
inoremap <A-S-Up> :action MoveLineUp<CR>
inoremap <A-S-K> :action MoveLineUp<CR>

nnoremap <C-S-K> :action MoveStatementUp<CR>
nnoremap <C-S-Up> :action MoveStatementUp<CR>
nnoremap <C-S-J> :action MoveStatementDown<CR>
nnoremap <C-S-Down> :action MoveStatementDown<CR>
vnoremap <C-S-K> :action MoveStatementUp<CR>
vnoremap <C-S-Up> :action MoveStatementUp<CR>
vnoremap <C-S-J> :action MoveStatementDown<CR>
vnoremap <C-S-Down> :action MoveStatementDown<CR>
inoremap <C-S-K> :action MoveStatementUp<CR>
inoremap <C-S-Up> :action MoveStatementUp<CR>
inoremap <C-S-J> :action MoveStatementDown<CR>
inoremap <C-S-Down> :action MoveStatementDown<CR>

nnoremap <A-S-O> :action RevealIn<CR>
nnoremap <A-S-L> :action LocateInSolutionView<CR>
" nnoremap <C-D> :action EditorDuplicate<CR> " 這個和 vim 原生的功能衝突，所以不使用

" nnoremap <C-S-D> :action SelectNextOccurrence<CR> " 這個和 vim 原生的功能衝突，所以不使用
" nnoremap <C-S-A-D> :action UnselectPreviousOccurrence<CR> " 這個和 vim 原生的功能衝突，所以不使用

" 建立 nunit test setup 並貼上已複製的內容至 { } 中
nnoremap <Leader>ns i[SetUp]<CR>public void Setup()<CR>{<ESC>po}<ESC>:action ReformatCode<CR>

" copy unit test 並將游標移至 void 後的 method name 上
nnoremap <Leader>ct ztmay?[T<CR>`ap?void<CR>w:action ReformatCode<CR>

" Home / End
nnoremap <Home> :action EditorLineStart<CR>
nnoremap <End> :action EditorLineEnd<CR>
vnoremap <Home> :action EditorLineStart<CR>
vnoremap <End> :action EditorLineEnd<CR>
inoremap <Home> :action EditorLineStart<CR>
inoremap <End> :action EditorLineEnd<CR>

" insert mode

" VCS
nnoremap <Leader>gr :action ChangesView.Revert<CR>

" error 
" 同檔案 - 避免移至不同的檔案
nnoremap <Leader>ne :action GotoNextError<CR>
vnoremap <Leader>ne :action GotoNextError<CR>


" navigate
nnoremap <A-u> :action FindUsages<CR>
nnoremap <A-m> :action ShowUsages<CR>
nnoremap <A-h> :action Back<CR>
nnoremap <A-l> :action Forward<CR>
nnoremap <A-j> :action GotoImplementation<CR>
nnoremap <A-k> :action GotoSuperMethod<CR>
nnoremap <A-i> :action MethodUp<CR>
nnoremap <A-,> :action MethodDown<CR>
